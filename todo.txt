Done:
* Refaktorer datamodellen, så den passer til Tasks
  o Ændr navnet Date til Deadline (OK)
  o Ændr navnet IsCancelled til Completed (OK)
  o Fjern City og Venue (OK)
  o Fjern Category (OK)
  o Ændr navnet Activity til Person (OK)
* Fjern Profile (OK)
* Ret listen til så det ser ordentligt ud (OK)
* Vis Completed propertyen under details (OK)
* Lav et filter så man ud over at kunne se alle tasks kan se completed eller noncompleted (OK)
* Lav et filter til Title
  o Vedligehold en state i ActivityFilters, som udtrykker filteret (OK)
  o Lav et filter på selve API'et og test med postman (OK)
  o Kald APIet med filteret som specificeret i guien (OK)
* Change the Completed attribute of person to Dead

Todo:
* READ på plads
 o Det skal fremgå af Details view om personen er levende, død eller om det er uspecificeret
 o Fødselsdato skal vises rigtigt - hvis man angiver en fødselsdato på f.eks. 01-08-2022 skal den også gemmes i databasen som 01-08-2022
   (den gemmes som utc-tid)
* Når du opretter en ny person og angiver, at vedkommende er død, skal det virke
* Når du opretter en ny person, skal den skrive rigtigt created tidspunkt
* Hvorfor laver den fødselsdagen om fra 24. juli til 23. juli??
  -> Hmm når du vælger en dato, skrives den ned som en anden dato...
* Færdig med Read
  o Birthday skal vises som tomt, hvis den er null (OK)
* Hvis ikke birthday sættes, skal man bruge null
* Sortering skal virke - hvordan sorterer den f.eks. på "Anders" og "Anders And"
* Vis tasks som er completed med overstregning i listen
* Overvej at placere Details på samme side som listen
* Tilret placeholderen, så den passer med den mere kompakte liste

Test:

CREATE:
C1: Prøv at lav en person uden at have indtastet information i nogen felter
    -> Det skal man ikke kunne - Submit-knappen skal kun være synlig, når der er indtastet noget i First Name
C2: Lav en person, hvor der blot er et first Name
    -> I databasen bør der være null for alle felter (inkl dead) pånær first name og created
    -> created skal indeholde created time i utc
C3: Lav en person, hvor man angiver fødselsdag som 24-07-1975
    -> Det skal være let at vælge et år mellem 1900 og indeværende år
    -> Det skal være let at vælge måned og dato
    -> Der skal være mulighed for at cleare en valgt dato
    -> created skal indeholde created time i utc
C4: Lav en person, hvor man først sætter værdien af Birthday til en dato men efterfølgende sætter tilbage til null
    -> Den række, der oprettes i databasen, skal have værdien null i feltet Birthday
C5: Lav en person, der er død
    -> Den række, der oprettes i databasen, skal have værdien 1 i feltet Dead
C6: Lav en person, der er explicit levende
    -> Den række, der oprettes i databasen, skal have værdien 0 i feltet Dead
C7: Lav en person, hvor man først sætter værdien af dead til Yes men efterfølgende sætter tilbage til null
    -> Den række, der oprettes i databasen, skal have værdien null i feltet Dead
C8: Lav en person, der har data i alle felter

READ:
R1: Gå gennem alle de personer, der blev lavet under Create-sektionen
    -> De date, der vises, skal svare til de indtastede

UPDATE:
U1: Vælg en person, der har information i alle felter og gå ind i Edit mode
    -> Alle felter skal udfyldes
U2: Vælg en person, der har en værdi på false for attributten dead og ændr den
    true
    -> Feltet skal ændres til true


Thoughts:
Du har haft et gevaldigt bøvl med at implementere support for attributten dead.
Du er tilsyneladende kommet igennem, men du måtte lave propertyen dead sådan,
at den både kunne være string, boolean og null, hvilket ikke virker synderligt
elegant. Den skal tilsyneladende være string eller null for at kunne bruges inden
for rammerne af PersonForm, men den skal være boolean eller null for at kunne
bruges til at kommunikere til API'et. I praksis gør du så det at du hijacker
feltet i forbindelse med at det passes frem og tilbage mellem PersonForm
og den resterende logik. Problemet ligger muligvis i at din MySelectInput